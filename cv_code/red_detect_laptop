import cv2
import numpy as np
import time

# Open the default camera (index 0)
cap = cv2.VideoCapture(0)

# Variable to track the previous state of red detection
previous_red_detected = False

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame. Exiting...")
        break

    # Convert the frame to HSV color space
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define the tighter range for bright red in HSV
    lower_red = np.array([0, 150, 150])  # Lower bound for bright red
    upper_red = np.array([10, 255, 255])  # Upper bound for bright red

    # Create a mask for red objects
    mask = cv2.inRange(hsv_frame, lower_red, upper_red)

    # Find contours from the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    red_detected = False  # Flag to check if red is detected

    for contour in contours:
        # Ignore small contours to avoid noise
        if cv2.contourArea(contour) > 500:  # Adjust size threshold as needed
            # Get the bounding box for the contour
            x, y, w, h = cv2.boundingRect(contour)
            
            # Draw a rectangle around the detected red object
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)  # Red color for bounding box

            red_detected = True  # Set flag if red object is detected

    # If red is detected and it wasn't detected previously, print the message
    if red_detected and not previous_red_detected:
        print("Red object detected!")
        previous_red_detected = True  # Update the state to "detected"

    # If red is not detected and was previously detected, reset the previous state
    if not red_detected and previous_red_detected:
        previous_red_detected = False  # Reset the state when red disappears

    # Show the original frame with rectangles
    cv2.imshow('Bright Red Object Detection', frame)

    # Exit on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and destroy all windows
cap.release()
cv2.destroyAllWindows()
